// let playersHand = new Hand ([])
// let computersHand = new Hand ([])
// console.log(playersHand.sortedCards)
// console.log(playersHand.handValue)
// console.log(computersHand.sortedCards)
// console.log(computersHand.handValue)
// console.log(computersHand.inUseCards)
// console.log(getWinner())


/* TO DO
    Complete tie breaker stuff
        make sure that Full house and two pair are correctly ordered X
        ultimate tie breaker X
    Complete logic for filling inUseCards, using allMatches X
    Computer AI X
    Psuedocode entire game X
    Create visual layout X
    Create hand type Objects
    innertext for displaying hands and winner


*/


/*

game():
initial load of page elements
when user hits "Deal" button: turn()

turn():

1. User hits "Deal" button. 
    The user receives 5 cards they can see at the bottom of the screen. At the top is five cards face down -- the computer's hand. 
    User now has the option of two buttons: "Draw cards" or "Keep cards"

    Unseen: create two new Hands
    DOM: top of screen displays 5 face down cards (opactity 0 -> 1). *Bottom screen displays the players cards. Deal button disapears. 
        "Deal cards" and "Keep cards" appear. Info from previous turn such as winner et cetera disapears.
    
2. Three possibilities here:
    User hits "Keep Cards". Nothing happens. Proceed to next step.
    User selects several of the cards by clicking, then clicks "Draw Cards". The cards selected are replaced by new cards. Proceed to next step.
    User selects no cards but hits "Draw Cards" anyway. An alert is displayed: "Click on the cards you want to discard before clicking 'Draw Cards'". Do not proceed.

    DOM: If "Keep cards", proceed to next step
        If user clicks "Draw Cards" without selecting cards: alert displayed
        If user clicks cards: cards move up to show they are selected
        If user then clicks "Draw Cards": playersHand = new Hand(playersHand.selectedCards. *Bottom screen displays the players cards. proceed to next step
    "Deal cards" and "Keep cards" disappear.
        

3.  Here the computer replaces cards. There is some kind of visual or textual indication how many cards are being drawn. 
    The computer will decide how many/which cards to replace by a deterministic algorythm based on the hand they currently have. A rough idea of how that'd work:
        For Straight Flush, Flush, Straight, Full House: replace 0
        For Four of a Kind and Two Pair: replace 1 
        For Three of a Kind: replace 2 
        For Pair: replace 3
        For No Hand: replace 3 lowest cards

        computerDraws()

4. The computer's cards are revealed. The hand (e.g. Full House, Two Pair) is declared in text for both the user and the computer. 
    Text displays "You win!" or "You lose!" 
    User has the option of a "Deal" button 
    Cards are returned to the deck and deck reshuffled

    getWinner()
    DOM: winner element displays "You win!" or "You lose!" Top of screen displays computer's cards. Hand is displayed in text for both computer and player
            Deal button appears. 

Organisation of page:

            LEFT                                                CENTERED                                        RIGHT
Top third   "Dealer's Hand" [computerHand.handValueName]        Computer's cards                                (options panel)

Center third Winner messege                                     pereptually face down "deck" card               Deal button

Bottom third "Your Hand" [playersHand.handValueName]            Player's cards                                  "Draw cards"/"Hold Cards" buttons

DOM elements needed:



TO DO Thursday Afternoon:
1. fix wager input so it only takes allowable values. alerts for when an improper value is taken X
2. restructure flow of functions to allow for two smooth rounds of betting
3. find penguins background and backs of cards image
4. further work on updating the appearance of the page as something dynamic that always makes sense at that particular moment
5. create appearance menus for light and dark mode
6. create system of awards with new back grounds unlocked at each new level. levels might be Oceanic 3000, New Zealand 6000, Galapogas 20000, Lunar 100000